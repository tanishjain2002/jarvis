# Import necessary packages
from time import sleep  # Import sleep function from the time module for delays
from selenium import webdriver  # Import the Selenium webdriver module
from selenium.webdriver.chrome.options import Options  # Import Chrome options for configuring the webdriver
from selenium.webdriver.common.by import By  # Import By class for locating elements in the DOM
import warnings  # Import warnings module for ignoring warnings
from selenium.webdriver.chrome.service import Service  # Import Service class for the Chrome webdriver
import pathlib  # Import pathlib module for working with file paths
import pyttsx3

# def Say(Text):
#     engine = pyttsx3.init()
#     engine.setProperty('rate', 200)  # Speed of speech (words per minute)
#     engine.setProperty('volume', 1)  # Volume (0.0 to 1.0)
#     print(f"==> Jarvis : {Text}")
#     engine.say(Text)
#     engine.runAndWait()

# Define your email and password

FileLoginLinkdin = open("Brain\\Linkdin.txt","r")
DataLinkdin = FileLoginLinkdin.read()
FileLoginLinkdin.close()
Id,Passcode = str(DataLinkdin).split(",")
IdorEmail = Id
Password = Passcode

# Ignore warnings generated by Selenium and set up the URL
warnings.simplefilter("ignore")
url = "https://flowgpt.com/chat"

# Get the absolute path of the current directory and set the path to the Chrome driver executable
scriptDirectory = pathlib.Path().absolute()
chrome_driver_path = 'Brain\\chromedriver.exe'

# Configure Chrome options
chrome_options = Options()
chrome_options.add_argument("--profile-directory=Default")  # Set Chrome profile directory
chrome_options.add_argument(f"user-data-dir={scriptDirectory}\\userdata")  # Set user data directory for Chrome
chrome_options.add_argument("--headless=new")  # Enable headless mode (runs Chrome without GUI)
chrome_options.add_argument('--log-level=3')  # Set Chrome log level

# Initialize the Chrome service and set a custom user agent
service = Service(chrome_driver_path)
user_agent = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2'
chrome_options.add_argument(f'user-agent={user_agent}')

# Create a Chrome webdriver instance with the specified options
driver = webdriver.Chrome(service=service, options=chrome_options)

# Maximize the Chrome window and navigate to the specified URL
driver.maximize_window()
driver.get(url)
sleep(5)  # Pause script execution for 5 seconds

# Function to perform initial setup
def Setup():

    # Attempt to click a button by its XPATH (ignoring exceptions if the element is not found)

    try:
        driver.find_element(by=By.XPATH, value="/html/body/div[4]/div[3]/div/section/div/button").click()
        sleep(1)
    except:
        pass
    try:
        driver.find_element(by=By.XPATH,value="/html/body/div[3]/div[3]/div/section/div/div[2]/button[4]").click()
        sleep(3)

    except:
        pass

    try:
        driver.find_element(by=By.XPATH,value="/html/body/div/main/div[2]/form/div[1]/input").send_keys(IdorEmail)
        sleep(0.5)

    except:
        pass

    try:
        driver.find_element(by=By.XPATH,value=" /html/body/div/main/div[2]/form/div[2]/input").send_keys(Password)
        sleep(0.5)

    except:
        pass

    try:
        driver.find_element(by=By.XPATH,value="/html/body/div/main/div[2]/form/div[3]/button").click()
        sleep(2)

    except:
        pass

    try:
        driver.find_element(by=By.XPATH,value="/html/body/div/div[2]/form/button").click()
        sleep(5)

    except:
        input("==> Security Alert : Press Enter If You've Completed It ")

        try:
            driver.find_element(by=By.XPATH,value="/html/body/div/div[2]/form/button").click()
            sleep(20)

        except:
            pass

# Uncomment this line to execute the Setup function
# Setup()

# Function to automate interactions with the chat application
def ChatGPTAutomation(Query, ChatNumber):
    # Input the provided query into the chat text area (ignoring exceptions)
    try:
        driver.find_element(by=By.XPATH, value="/html/body/div[1]/main/div[3]/div/div[2]/div/div[2]/div[2]/div/div[2]/div[2]/div/textarea").send_keys(Query)
    except:
        pass

    # Click the chat send button (ignoring exceptions)
    try:
        driver.find_element(by=By.XPATH, value="/html/body/div[1]/main/div[3]/div/div[2]/div/div[2]/div[2]/div/div[2]/div[2]/div/button").click()
        sleep(2)
    except:
        pass

    # Wait for a specific element to appear (ignoring exceptions)
    try:
        while True:
            Wait = driver.find_element(by=By.XPATH, value="/html/body/div[1]/main/div[3]/div/div[2]/div/div[2]/div[2]/div/div[2]/div[1]/div/button").is_displayed()
            if Wait == True:
                pass

    except:
        pass

    # Extract the chat response and calculate the new chat number
    ChatNumber = str(ChatNumber)
    XpathValue = f"/html/body/div[1]/main/div[3]/div/div[2]/div/div[2]/div[2]/div/div[1]/div/div[{ChatNumber}]/div/div"
    Result = driver.find_element(by=By.XPATH, value=XpathValue).text
    NewChatNumber = int(ChatNumber) + 2
    return Result, NewChatNumber

# Function to scrape the last chat number
def LastChatNumberScraper():
    # Wait for an element to become enabled (ignoring exceptions)
    while True:
        try:
            TextIn = driver.find_element(by=By.XPATH, value="/html/body/div[1]/main/div[3]/div/div[2]/div/div[2]/div[2]/div/div[2]/div[2]/div").is_enabled()
            break
        except Exception as e:
            pass

    # Loop to find the last chat number by checking the visibility of elements
    for i in range(1, 10001):
        if i % 2 != 0:
            try:
                XpathValue = f"/html/body/div[1]/main/div[3]/div/div[2]/div/div[2]/div[2]/div/div[1]/div/div[{i}]/div/div"
                Result = driver.find_element(by=By.XPATH, value=XpathValue).is_displayed()
                if Result == True:
                    pass
            except:
                return i

# Get the initial chat number by calling the LastChatNumberScraper function
ChatNumber = LastChatNumberScraper()

DataFile = open("Body\\SpeechRecognition.txt", "w")
DataFile.close()

DataHistoryFile = open("Brain\\HistoryChat.txt","w")
DataHistoryFile.close()

def ListenFunction():

    while True:

        DataFile = open("Body\\SpeechRecognition.txt","r")
        Data = DataFile.read()
        DataFile.close()

        DataHistoryFile = open("Brain\\HistoryChat.txt","r")
        DataHistory = DataHistoryFile.read()
        DataHistoryFile.close()

        if len(Data)==0:
            pass
        
        elif str(DataHistory)==str(Data):
            pass

        else:
            print(f"==> You Said : {str(Data)}")
            DataHistoryFile = open("Brain\\HistoryChat.txt","w")
            DataHistoryFile.write(Data)
            DataHistoryFile.close()
            return Data
    
# Main loop to interact with the chat
while True:
    Query = ListenFunction()
    Answer, ChatNumberNew = ChatGPTAutomation(Query=Query, ChatNumber=ChatNumber)
    print(f"==> Jarvis : {Answer}") # Print the chatbot's answer
    ChatNumber = str(ChatNumberNew)  # Update the chat number for the next interaction
    
